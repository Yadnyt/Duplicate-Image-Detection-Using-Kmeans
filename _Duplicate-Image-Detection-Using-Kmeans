{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import all the required modules like numpy,tensorflow,cv2,pil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\1357832628.py:9: DeprecationWarning: Please use `gaussian_filter` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
      "  from scipy.ndimage.filters import gaussian_filter\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\yadny\\anaconda3\\lib\\site-packages\\tensorflow\\python\\compat\\v2_compat.py:107: disable_resource_variables (from tensorflow.python.ops.variable_scope) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "non-resource variables are not supported in the long term\n"
     ]
    }
   ],
   "source": [
    "import PIL\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "import random\n",
    "import os\n",
    "import fnmatch\n",
    "import cv2\n",
    "from PIL import ImageFile\n",
    "from scipy.ndimage.filters import gaussian_filter\n",
    "from scipy import ndimage\n",
    "import numpy as np\n",
    "import sys\n",
    "import tensorflow.compat.v1 as tf\n",
    "tf.disable_v2_behavior()\n",
    "import matplotlib.pyplot as plt\n",
    "#from PIL import Image, ImageFile\n",
    "from sklearn.cluster import KMeans\n",
    "import pickle\n",
    "import imagehash\n",
    "from IPython.display import Image\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\yadny'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Define current directory , data directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "current_directory = os.getcwd()\n",
    "main_dir = 'C:\\\\Users\\\\yadny\\\\OneDrive\\\\Documents'\n",
    "data_dir = current_directory + '/valid_set'\n",
    "valid_dir = current_directory + '/valid_set'\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Add gaussian blur to image,flip image, translate image and rotate image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def apply_blur(image_name,newname): \n",
    "\n",
    "    #kernel=np.ones(5,5)/25.0 \n",
    "\n",
    "    #blurred=np.zeros_like(image) \n",
    "\n",
    "    #cv2.filter2D(image,-1,kernel,dst) #applying mean blur \n",
    "\n",
    "    image = PIL.Image.open(image_name) \n",
    "\n",
    "    blurred=gaussian_filter(image,sigma=50) #applies gausian blur \n",
    "\n",
    "    cv2.imwrite(newname,blurred) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yadny\\OneDrive\\Documents\\valid_set\n"
     ]
    }
   ],
   "source": [
    "%cd $main_dir/valid_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "apply_blur('ghoda.jpeg','ghoda_blur_100.jpeg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Flipped image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img = PIL.Image.open('ghoda.jpeg') \n",
    "\n",
    "flipped = np.fliplr(img) \n",
    "\n",
    "cv2.imwrite('ghoda_flip.jpeg',cv2.cvtColor(flipped,cv2.COLOR_RGB2BGR)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Translate image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\3591323374.py:9: DeprecationWarning: AFFINE is deprecated and will be removed in Pillow 10 (2023-07-01). Use Transform.AFFINE instead.\n",
      "  img = img.transform(img.size, PIL.Image.AFFINE, (a, b, c, d, e, f))\n"
     ]
    }
   ],
   "source": [
    "img =  PIL.Image.new('RGB', (10, 10), 'blue')\n",
    "a = 1\n",
    "b = 0\n",
    "c = 50#left/right (i.e. 50)\n",
    "d = 0\n",
    "e = 1\n",
    "f = 50 #up/down (i.e. 50)\n",
    "img = PIL.Image.open('ghoda.jpeg')\n",
    "img = img.transform(img.size, PIL.Image.AFFINE, (a, b, c, d, e, f)) \n",
    "img.save('ghoda_translated_50.jpeg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rotate image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#rotation angle in degree\n",
    "image = cv2.imread('ghoda.jpeg')\n",
    "rotated = ndimage.rotate(image, 180)\n",
    "cv2.imwrite('ghoda_rotated_180.jpeg',rotated)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fetch all the jpegs from the data directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = 'C:/Users/yadny/OneDrive/Documents/image_data'\n",
    "\n",
    "configfiles = [os.path.join(subdir,f)\n",
    "for subdir, dirs, files in os.walk(path)\n",
    "    for f in fnmatch.filter(files, '*.jpg')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocess the data by resize, converting into an array and rescale the image and define the get_batch function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def resize(img, output_shape = (32, 32)):\n",
    "     return img.resize(output_shape, PIL.Image.ANTIALIAS)\n",
    "        #return cv2.resize(img, output_shape) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rescale(A, method=1):\n",
    "    if 1== method:  \n",
    "        return A / float(A.max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def img2array(img, dtype=np.float32):\n",
    "    return np.array(img, dtype=dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_batch(configfiles,ibatch, batch_size=100):    \n",
    "    \n",
    "    ibatch = ibatch % len(configfiles)\n",
    "    \n",
    "    image_name_list_batch = configfiles[ibatch:ibatch+batch_size]\n",
    "    \n",
    "       # print(image_name_list_batch)\n",
    "    import PIL.Image     \n",
    "    \n",
    "    img_data_list = []\n",
    "    for image_name in image_name_list_batch:\n",
    "        ImageFile.LOAD_TRUNCATED_IMAGES = True\n",
    "        img = PIL.Image.open(image_name)\n",
    "        img = resize(img)\n",
    "        img_data_list += [rescale( img2array(img) )]\n",
    "        \n",
    "    X_batch = np.asanyarray(img_data_list)\n",
    "    return (X_batch)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CNN Auto Encoder Decoder Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#learning_rate = 0.001\n",
    "inputs_ = tf.placeholder(tf.float32,[None,32,32,3])\n",
    "targets_ = tf.placeholder(tf.float32,[None,32,32,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lrelu(x,alpha=0.1):\n",
    "    return tf.maximum(alpha*x,x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\415085578.py:3: UserWarning: `tf.layers.conv2d` is deprecated and will be removed in a future version. Please Use `tf.keras.layers.Conv2D` instead.\n",
      "  conv1 = tf.layers.conv2d(inputs_,filters=4,kernel_size=(3,3),strides=(1,1),padding='SAME',use_bias=True,activation=lrelu,name='conv1')\n",
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\415085578.py:6: UserWarning: `tf.layers.max_pooling2d` is deprecated and will be removed in a future version. Please use `tf.keras.layers.MaxPooling2D` instead.\n",
      "  maxpool1 = tf.layers.max_pooling2d(conv1,pool_size=(2,2),strides=(2,2),name='pool1')\n",
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\415085578.py:9: UserWarning: `tf.layers.conv2d` is deprecated and will be removed in a future version. Please Use `tf.keras.layers.Conv2D` instead.\n",
      "  conv2 = tf.layers.conv2d(maxpool1,filters=8,kernel_size=(3,3),strides=(1,1),padding='SAME',use_bias=True,activation=lrelu,name='conv2')\n",
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\415085578.py:12: UserWarning: `tf.layers.max_pooling2d` is deprecated and will be removed in a future version. Please use `tf.keras.layers.MaxPooling2D` instead.\n",
      "  maxpool2 = tf.layers.max_pooling2d(conv2,pool_size=(2,2),strides=(2,2),name='pool2')\n",
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\415085578.py:15: UserWarning: `tf.layers.conv2d` is deprecated and will be removed in a future version. Please Use `tf.keras.layers.Conv2D` instead.\n",
      "  conv3 = tf.layers.conv2d(maxpool2,filters=16,kernel_size=(3,3),strides=(1,1),padding='SAME',use_bias=True,activation=lrelu,name='conv3')\n",
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\415085578.py:18: UserWarning: `tf.layers.average_pooling2d` is deprecated and will be removed in a future version. Please use `tf.keras.layers.AveragePooling2D` instead.\n",
      "  encoded = tf.layers.average_pooling2d(conv3,pool_size=(2,2),strides=(2,2),name='encoding')\n"
     ]
    }
   ],
   "source": [
    "### Encoder\n",
    "with tf.name_scope('en-convolutions'):\n",
    "    conv1 = tf.layers.conv2d(inputs_,filters=4,kernel_size=(3,3),strides=(1,1),padding='SAME',use_bias=True,activation=lrelu,name='conv1')\n",
    "# Now 32x32x4\n",
    "with tf.name_scope('en-pooling'):\n",
    "    maxpool1 = tf.layers.max_pooling2d(conv1,pool_size=(2,2),strides=(2,2),name='pool1')\n",
    "# Now 16x16x4\n",
    "with tf.name_scope('en-convolutions'):\n",
    "    conv2 = tf.layers.conv2d(maxpool1,filters=8,kernel_size=(3,3),strides=(1,1),padding='SAME',use_bias=True,activation=lrelu,name='conv2')\n",
    "# Now 16x16x8\n",
    "with tf.name_scope('en-pooling'):\n",
    "    maxpool2 = tf.layers.max_pooling2d(conv2,pool_size=(2,2),strides=(2,2),name='pool2')\n",
    "# Now 8x8x8\n",
    "with tf.name_scope('en-convolutions'):\n",
    "    conv3 = tf.layers.conv2d(maxpool2,filters=16,kernel_size=(3,3),strides=(1,1),padding='SAME',use_bias=True,activation=lrelu,name='conv3')\n",
    "# Now 8x8x16\n",
    "with tf.name_scope('encoding'):\n",
    "    encoded = tf.layers.average_pooling2d(conv3,pool_size=(2,2),strides=(2,2),name='encoding')\n",
    "# Now 4x4x16.\n",
    "#latent space"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\3174111933.py:3: UserWarning: `tf.layers.conv2d_transpose` is deprecated and will be removed in a future version. Please Use `tf.keras.layers.Conv2DTranspose` instead.\n",
      "  upsample1 = tf.layers.conv2d_transpose(encoded,filters=16,kernel_size=3,padding='same',strides=2,name='upsample1')\n",
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\3174111933.py:7: UserWarning: `tf.layers.conv2d_transpose` is deprecated and will be removed in a future version. Please Use `tf.keras.layers.Conv2DTranspose` instead.\n",
      "  upsample2 = tf.layers.conv2d_transpose(conv4,filters=8,kernel_size=3,padding='same',strides=2,name='upsample2')\n",
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\3174111933.py:11: UserWarning: `tf.layers.conv2d_transpose` is deprecated and will be removed in a future version. Please Use `tf.keras.layers.Conv2DTranspose` instead.\n",
      "  upsample3 = tf.layers.conv2d_transpose(conv5,filters=8,kernel_size=5,padding='same',strides=2,name='upsample3')\n",
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\3174111933.py:13: UserWarning: `tf.layers.conv2d` is deprecated and will be removed in a future version. Please Use `tf.keras.layers.Conv2D` instead.\n",
      "  conv6 = tf.layers.conv2d(upsample3,filters=4,kernel_size=(5,5),strides=(1,1),name='conv6',padding='SAME',use_bias=True,activation=lrelu)\n",
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\3174111933.py:15: UserWarning: `tf.layers.conv2d` is deprecated and will be removed in a future version. Please Use `tf.keras.layers.Conv2D` instead.\n",
      "  logits = tf.layers.conv2d(conv6,filters=3,kernel_size=(3,3),strides=(1,1),name='logits',padding='SAME',use_bias=True)\n"
     ]
    }
   ],
   "source": [
    "### Decoder\n",
    "with tf.name_scope('decoder'):\n",
    "    upsample1 = tf.layers.conv2d_transpose(encoded,filters=16,kernel_size=3,padding='same',strides=2,name='upsample1')\n",
    "# Now 8x8x16\n",
    "    conv4 = upsample1 #tf.layers.conv2d(upsample1,filters=16,kernel_size=(3,3),strides=(1,1),padding='SAME',name='conv4',use_bias=True,activation=lrelu)\n",
    "# Now 8x8x16\n",
    "    upsample2 = tf.layers.conv2d_transpose(conv4,filters=8,kernel_size=3,padding='same',strides=2,name='upsample2')\n",
    "# Now 16x16x8\n",
    "    conv5 = upsample2 #tf.layers.conv2d(upsample2,filters=8,kernel_size=(3,3),strides=(1,1),name='conv5',padding='SAME',use_bias=True,activation=lrelu)\n",
    "# Now 16x16x8\n",
    "    upsample3 = tf.layers.conv2d_transpose(conv5,filters=8,kernel_size=5,padding='same',strides=2,name='upsample3')\n",
    "# Now 32x32x8\n",
    "    conv6 = tf.layers.conv2d(upsample3,filters=4,kernel_size=(5,5),strides=(1,1),name='conv6',padding='SAME',use_bias=True,activation=lrelu)\n",
    "# Now 32x32x4\n",
    "    logits = tf.layers.conv2d(conv6,filters=3,kernel_size=(3,3),strides=(1,1),name='logits',padding='SAME',use_bias=True)\n",
    "#Now 32x32x3\n",
    "# Pass logits through sigmoid to get reconstructed image\n",
    "    decoded = tf.sigmoid(logits,name='recon')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define loss and optimiser"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss = tf.nn.sigmoid_cross_entropy_with_logits(logits=logits,labels=targets_)\n",
    "\n",
    "learning_rate=tf.placeholder(tf.float32)\n",
    "cost = tf.reduce_mean(loss) #cost\n",
    "opt = tf.train.AdamOptimizer(learning_rate).minimize(cost) #optimizer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train model, save model, graph and store embeddings of images in list "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\2968716772.py:2: DeprecationWarning: ANTIALIAS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.\n",
      "  return img.resize(output_shape, PIL.Image.ANTIALIAS)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 1/50... Training loss: 0.6933\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_16708\\1637121526.py:17: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
      "  X_batch = np.asanyarray(img_data_list)\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "could not broadcast input array from shape (32,32,3) into shape (32,32)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_16708\\3714121771.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     21\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0me\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mepochs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     22\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mibatch\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mconfigfiles\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 23\u001b[1;33m         \u001b[0mX_batch\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_batch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mconfigfiles\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mibatch\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     24\u001b[0m         \u001b[0mimgs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mX_batch\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m32\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m32\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     25\u001b[0m         batch_cost, _ = sess.run([cost, opt], feed_dict={inputs_: imgs,\n",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_16708\\1637121526.py\u001b[0m in \u001b[0;36mget_batch\u001b[1;34m(configfiles, ibatch, batch_size)\u001b[0m\n\u001b[0;32m     15\u001b[0m         \u001b[0mimg_data_list\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mrescale\u001b[0m\u001b[1;33m(\u001b[0m \u001b[0mimg2array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 17\u001b[1;33m     \u001b[0mX_batch\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0masanyarray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg_data_list\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     18\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mX_batch\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: could not broadcast input array from shape (32,32,3) into shape (32,32)"
     ]
    }
   ],
   "source": [
    "# Training\n",
    "\n",
    "sess = tf.Session()\n",
    "#tf.reset_default_graph()\n",
    "\n",
    "saver = tf.train.Saver()\n",
    "\n",
    "\n",
    "#tf.summary.scalar(\"loss\", cost)\n",
    "#merged_summary_op = tf.summary.merge_all()\n",
    "\n",
    "\n",
    "\n",
    "epochs = 50\n",
    "batch_size = 200\n",
    "#lr=[1e-3/(2**(i//20)) for i in range(epochs)]\n",
    "lr=1e-3\n",
    "sess.run(tf.global_variables_initializer())\n",
    "writer = tf.summary.FileWriter('./graphs', sess.graph)\n",
    "#summary_writer = tf.summary.FileWriter('./writer', graph=tf.get_default_graph())\n",
    "for e in range(epochs):\n",
    "    for ibatch in range(0, len(configfiles), batch_size):\n",
    "        X_batch = get_batch(configfiles, ibatch, batch_size=batch_size)\n",
    "        imgs = X_batch[0].reshape((-1, 32, 32, 3))\n",
    "        batch_cost, _ = sess.run([cost, opt], feed_dict={inputs_: imgs,\n",
    "                                                         targets_: imgs,learning_rate:lr})\n",
    "        \n",
    "        #summary_writer.add_summary(summary, epochs * len(a) + ibatch)  \n",
    "        print(\"Epoch: {}/{}...\".format(e+1, epochs),\n",
    "              \"Training loss: {:.4f}\".format(batch_cost))\n",
    "      \n",
    "    #show_reconstructed(sess,imgs[:10],decoded)\n",
    "writer.close()\n",
    "\n",
    "all_encodings = []\n",
    "for ibatch in range(0, len(configfiles), batch_size):\n",
    "    X_encode = sess.run(encoded,feed_dict={inputs_:X_batch.reshape((-1,32,32,3))})\n",
    "    all_encodings.append(X_encode)\n",
    "\n",
    "saver.save(sess, 'encode_model') \n",
    "\n",
    "\n",
    "sess.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert the embedding in a (None,256) dimensional array and save the encodings in a .npy file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_encodings= np.array([batch.reshape(-1,8*8*4) for batch in all_encodings]).reshape(-1,8*8*4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.array(all_encodings).dump(open('training_encodings.npy', 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "myArray = np.load(open('training_encodings.npy', 'rb'),allow_pickle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(180, 256)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myArray.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  Reconstructions of the training images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def show_reconstructed(sess,batch_x,decode_op):\n",
    "    fig, axes = plt.subplots(nrows=2, ncols=10, sharex=True, sharey=True, figsize=(20,4))\n",
    "    #in_imgs = X_batch\n",
    "    reconstructed = sess.run(decode_op, feed_dict={inputs_: batch_x.reshape((-1, 32, 32, 3))})\n",
    "\n",
    "    for images, row in zip([batch_x, reconstructed], axes):\n",
    "        for img, ax in zip(images, row):\n",
    "            ax.imshow(img.reshape((32, 32,3)))\n",
    "            ax.get_xaxis().set_visible(False)\n",
    "            ax.get_yaxis().set_visible(False)\n",
    "\n",
    "    fig.tight_layout(pad=0.1)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = 'C:/Users/yadny/OneDrive/Documents/image_data'\n",
    "\n",
    "configfiles = [os.path.join(subdir,f)\n",
    "for subdir, dirs, files in os.walk(path)\n",
    "    for f in fnmatch.filter(files, '*.jpg')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Restoring parameters from ./encode_model\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_20188\\2968716772.py:2: DeprecationWarning: ANTIALIAS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.\n",
      "  return img.resize(output_shape, PIL.Image.ANTIALIAS)\n"
     ]
    }
   ],
   "source": [
    "loaded_graph=tf.Graph()\n",
    "with tf.Session(graph=loaded_graph) as sess:\n",
    "    loader=tf.train.import_meta_graph('./encode_model.meta')\n",
    "    loader.restore(sess,tf.train.latest_checkpoint('./'))\n",
    "    inputs_=loaded_graph.get_tensor_by_name('Placeholder:0')\n",
    "    recon=loaded_graph.get_tensor_by_name('decoder/recon:0')\n",
    "    batch_x = get_batch(configfiles, 6, batch_size=10) \n",
    "    #show_reconstructed(sess,batch_x,recon)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Generate Validation data's embeddings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = 'C:/Users/yadny/OneDrive/Documents/image_data'\n",
    "\n",
    "configfiles = [os.path.join(subdir,f)\n",
    "for subdir, dirs, files in os.walk(path)\n",
    "    for f in fnmatch.filter(files, '*.jpg')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def valid_get_batch(configfiles):    \n",
    "    \n",
    "       # print(image_name_list_batch)\n",
    "    import PIL.Image    \n",
    "    \n",
    "    img_data_list = []\n",
    "    for image_name in configfiles:\n",
    "        ImageFile.LOAD_TRUNCATED_IMAGES = True\n",
    "        img = PIL.Image.open(image_name)\n",
    "        img = resize(img)\n",
    "        img_data_list += [rescale( img2array(img) )]\n",
    "        \n",
    "    X_batch = np.asanyarray(img_data_list)\n",
    "    return (X_batch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Restoring parameters from ./encode_model\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yadny\\AppData\\Local\\Temp\\ipykernel_20188\\2968716772.py:2: DeprecationWarning: ANTIALIAS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.\n",
      "  return img.resize(output_shape, PIL.Image.ANTIALIAS)\n"
     ]
    }
   ],
   "source": [
    "loaded_graph=tf.Graph()\n",
    "with tf.Session(graph=loaded_graph) as sess:\n",
    "    loader=tf.train.import_meta_graph('./encode_model.meta')\n",
    "    loader.restore(sess,tf.train.latest_checkpoint('./'))\n",
    "    \n",
    "    #print([[n.name for n in tf.get_default_graph().as_graph_def().node if 'de-convo' in n.name]])\n",
    "    inputs_=loaded_graph.get_tensor_by_name('Placeholder:0')\n",
    "    encoding=loaded_graph.get_tensor_by_name('encoding/encoding/AvgPool:0')\n",
    "    recon=loaded_graph.get_tensor_by_name('decoder/recon:0')\n",
    "    \n",
    "    batch_x=valid_get_batch(configfiles)\n",
    "    validations=sess.run(encoding,feed_dict={inputs_:batch_x}) #50,8,8,4\n",
    "    validations=validations.reshape(-1,8*8*4)\n",
    "    #show_reconstructed(sess,batch_x,recon)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Testing on Dev set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## calculate L2 distance on encodings of two images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/jpeg": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(filename='ghoda.jpeg') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/jpeg": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(filename='ghoda_flip.jpeg') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.9794908"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linalg.norm(validations[140]-validations[8])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/jpeg": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(filename='rose.jpeg') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/jpeg": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(filename='rose.jpeg') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linalg.norm(validations[1]-validations[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Compare results with Phash"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "img = PIL.Image.open('ghoda.jpeg')\n",
    "image1 = imagehash.phash(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "img = PIL.Image.open('ghoda_flip.jpeg')\n",
    "image2 = imagehash.phash(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image1-image2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Similar Images\n"
     ]
    }
   ],
   "source": [
    "a=(np.linalg.norm(validations[140]-validations[143]))\n",
    "if(a<1):\n",
    "    print(\"Images are duplicate\")\n",
    "elif(1<a<2):\n",
    "    print(\"Similar Images\")\n",
    "else:\n",
    "    print(\"Images are not duplicate\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Kmeans clustering for optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans=KMeans(n_clusters=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans_fit = kmeans.fit(myArray) #1 gb of ram to store 1 million embeddings. 1 million * 256 * 4 byte(float)\n",
    "cluster_centers = kmeans.cluster_centers_ #these are cluster centers from kmeans\n",
    "cluster_centers.shape\n",
    "pred = kmeans.predict(myArray)\n",
    "pred.shape\n",
    "with open('kmeans_model.pkl', 'wb') as f:\n",
    "     pickle.dump(kmeans_fit, f)\n",
    "pkl = open('kmeans_model.pkl', 'rb')\n",
    "kmeans_pred = pickle.load(pkl)\n",
    "cluster_centers = kmeans_pred.cluster_centers_\n",
    "pred = kmeans_pred.predict(myArray)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "cluster_centers = kmeans.cluster_centers_ #these are cluster centers from kmeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 256)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_centers.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = kmeans.predict(myArray)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(180,)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('kmeans_model.pkl', 'wb') as f:\n",
    "     pickle.dump(kmeans_fit, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "pkl = open('kmeans_model.pkl', 'rb')\n",
    "kmeans_pred = pickle.load(pkl)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "cluster_centers = kmeans_pred.cluster_centers_ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = kmeans_pred.predict(myArray)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,\n",
       "       0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0,\n",
       "       0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,\n",
       "       1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,\n",
       "       0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0,\n",
       "       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0,\n",
       "       0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,\n",
       "       0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1,\n",
       "       0, 0, 0, 0])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(180,)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(2):\n",
    "    index = np.where(pred == i)\n",
    "    np.array(cluster_centers[i]).dump(open('cluster_center[%s].npy' % i, 'wb'))\n",
    "    np.array(myArray[index]).dump(open('binary_encodings[%s].npy' % i, 'wb'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predict clusters for each image encoding from the Dev set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "valid_pred = kmeans_pred.predict(validations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,\n",
       "       0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,\n",
       "       0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,\n",
       "       0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0,\n",
       "       0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n",
       "       0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0,\n",
       "       0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0,\n",
       "       0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "valid_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(237,)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "valid_pred.shape"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
